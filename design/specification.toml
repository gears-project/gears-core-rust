[SPC-artifact]
text = '''

'''

[SPC-artifact-generation]
text = '''

'''

[SPC-artifact-generation-model]
text = '''

'''

[SPC-artifact-generation-page]
text = '''
Page models can be transformed to React JavaScript/JSX components
'''

[SPC-artifact-generation-xflow]
text = '''
XFlow models can be transformed to JavaScript code
'''

[SPC-dsl]
text = '''
 - Textual content for the DSL will only be accessed through a parser
 - The language will be consist of two distint forms of content,
   * Global level (Command, Scope, Comment)
   * Component level

Component level commands will be passed to the relevant components, which are
each responsible for parsing these commands and executing them.

'''

[SPC-dsl-consistency]
text = '''
All interaction with the DSL will take place through a trait.

'''

[SPC-dsl-consistency-common_document]
text = 'All Documents shall implement the dsl trait'

[SPC-dsl-consistency-common_document_list]
text = 'All Document lists shall be queryable through a common interface and use identical semantics.'

[SPC-dsl-extensibility]
text = '''


'''

[SPC-flox]

[SPC-flox-variable]

[SPC-flox-variable-extraction]

[SPC-flox-variables]
text = '''
Any variables that are available in an xflow should be available for evaluation
in a flox expression.

These are,
 - Boolean
 - Integer
'''

[SPC-serialization]
text = '''
All aspects of the Model datastructures derive the serde traits Serialize and
Deserialize, without exceptions.
'''

[SPC-serialization-fs]
text = '''
Model serialization to and deserialization from filesystem is implemented in a utility module.

As part of the suitability for management under version control, serialization
of all data structures should remain the same across serialization and
deserialization cycles. Specifically, HashMaps have to be sorted on
serialization following a consistent algorithm.
'''

[SPC-serialization-json]
text = '''
Model serialization is performed using **serde_json**
'''

[SPC-serialization-yaml]
text = '''
Model serialization is performed using **serde_yaml**
'''

[SPC-xflow]

[SPC-xflow-call]
text = '''
An xflow shall have a node of type 'call' which,

 - Can invoke another xflow, named in its node parameters
 - Can pass local variables
 - Can assign the return values to local variables
'''
