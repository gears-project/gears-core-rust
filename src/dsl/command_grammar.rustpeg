use dsl::command::*;

label -> String
  = label:$([A-Za-z0-9\_]+) {
    label.to_string()
  }

_ -> ()
  = space*

space -> ()
  = " "

newline -> ()
  = "\n"
  / "\r"
  / "\r\n"

pub expression -> Vec<DslToken>
  = dsl_token*

pub dsl_token -> DslToken
  = _ "with " label:label {
    DslToken::With(label.to_string())
  }
  / _ "{" {
    DslToken::BlockOpen
  }
  / _ "};" {
    DslToken::BlockClose
  }
  / _ command:$([A-Za-z\ ]+) ";" {
    DslToken::Command(command.to_string())
  }
  / _ "#" command:$([A-Za-z\ ]+) newline {
    DslToken::Comment(command.to_string())
  }

// For domain::Domain GearsDsl implementation

use structure::domain::DomainCommand;

pub domain_command -> DomainCommand
  = "add entity" " " label:label {
    DomainCommand::AddEntity(label.to_string())
  }
  / "remove entity" " " label:label {
    DomainCommand::RemoveEntity(label.to_string())
  }
  / "add attribute" " " attr:label ":" attr_type:label {
    DomainCommand::AddAttribute(attr.to_string(), attr_type.to_string())
  }
  / "remove attribute" " " attr:label {
    DomainCommand::RemoveAttribute(attr.to_string())
  }
  / "add validation" " " attr:label ":" attr_type:label {
    DomainCommand::AddValidation(attr.to_string(), attr_type.to_string())
  }
  / "remove validation" " " attr:label {
    DomainCommand::RemoveValidation(attr.to_string())
  }

xflow_command -> XFlowCommand
  = "add node" " " label:label {
    XFlowCommand::AddNode(label.to_string())
  }

config_command -> ConfigCommand
  = "set default_locale" " " locale:label {
    ConfigCommand::SetDefaultLocale(locale.to_string())
  }

