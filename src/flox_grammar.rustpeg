use flox::{FloxResult};

pub expression -> FloxResult
  = e:equation { FloxResult::Integer(e) }

pub equation -> i64
  = add / sub / mul / div

pub add -> i64
  = i:int space* "+" space* j:int { i + j }

pub sub -> i64
  = i:int space* "-" space* j:int { i - j }

pub mul -> i64
  = i:int space* "*" space* j:int { i * j }

pub div -> i64
  = i:int space* "/" space* j:int { i / j }

// Boolean

pub boolean_expression -> FloxResult
  = e:boolean_test { FloxResult::Boolean(e) }

pub boolean_test -> bool
  = equals
  / not_equals
  / greater_than
  / less_than
  / greater_or_equal
  / less_or_equal

pub equals -> bool
  = l:int space* "==" space* r:int { l == r }
  / l:boolean space* "==" space* r:boolean { l == r }

pub not_equals -> bool
  = l:int space* "!=" space* r:int { l != r }
  / l:boolean space* "!=" space* r:boolean { l != r }

pub greater_than -> bool
  = l:int space* ">" space* r:int { l > r }

pub less_than -> bool
  = l:int space* "<" space* r:int { l < r }

pub greater_or_equal -> bool
  = l:int space* ">=" space* r:int { l >= r }

pub less_or_equal -> bool
  = l:int space* "<=" space* r:int { l <= r }


// Primitives

pub boolean -> bool
 = b:"true" { true }
 / b:"false" { false }

pub int -> i64
  = n:$([0-9]+) { n.parse().unwrap() }

pub space -> ()
  = " "
  / "\n"
  / "\r"

