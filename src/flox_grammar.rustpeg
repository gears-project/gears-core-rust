use xfstruct::{XFlowValue};
use xfstate::{XFState};

#![arguments(context: &XFState)]

pub expression -> XFlowValue
  = parenthesized<expression>
  / variable
  / arithmetic_expression
  / boolean_expression
  / atom

parenthesized<foo>
  = "(" s:foo ")" { s }

// Arithmetic

pub arithmetic_expression -> XFlowValue
  = e:arithmetic { XFlowValue::Integer(e) }

pub arithmetic -> i64
    = #infix<integer> {
        #L x plus y { x + y }
           x minus y { x - y }
        #L x times y { x * y }
           x division y { x / y }
        #R x power y { x.pow(y as u32) }
    }

plus -> ()
 = _ "+" _

minus -> ()
 = _ "-" _

times -> ()
 = _ "*" _

division -> ()
 = _ "/" _

power -> ()
 = _ "^" _

// Boolean

pub boolean_expression -> XFlowValue
  = e:boolean_test { XFlowValue::Boolean(e) }

boolean_test -> bool
  = boolean_not
  / numeric_boolean_result
  / boolean_boolean_result

numeric_boolean_result -> bool
  = l:integer _ "==" _ r:integer { l == r }
  / l:integer _ "!=" _ r:integer { l != r }
  / l:integer _ ">" _ r:integer { l > r }
  / l:integer _ "<" _ r:integer { l < r }
  / l:integer _ ">=" _ r:integer { l >= r }
  / l:integer _ "<=" _ r:integer { l <= r }

boolean_boolean_result -> bool
    = #infix<boolean> {
        #L l boolean_equals r { l == r }
           l boolean_not_equals r { l != r }
        #R l boolean_and r { l && r }
           l boolean_or r { l || r }
    }

boolean_equals -> ()
  = _ "==" _

boolean_not_equals -> ()
  = _ "!=" _

boolean_and -> ()
  = _ "&&" _

boolean_or -> ()
  = _ "||" _

boolean_not -> bool
  = "!" l:boolean { !l }

// Primitives

atom -> XFlowValue
 = i:integer { XFlowValue::Integer(i) }
 / b:boolean { XFlowValue::Boolean(b) }

boolean -> bool
 = b:"true" { true }
 / b:"false" { false }

integer -> i64
  = n:$([0-9]+) { n.parse().unwrap() }

variable -> XFlowValue
 = "$" s:$([A-Za-z]+) {?
    match context.get(s) {
        Some(val) => Ok(val.value.to_owned()),
        None => Err("Value not found in local state")
    }
}

space -> ()
  = " "
  / "\n"
  / "\r"

_ = space*

