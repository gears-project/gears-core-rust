use xfstruct::{XFlowValue};

pub expression -> XFlowValue
  = boolean_expression
  / arithmetic_expression
  / atom

// Arithmetic

pub arithmetic_expression -> XFlowValue
  = e:arithmetic { XFlowValue::Integer(e) }

pub arithmetic -> i64
    = #infix<integer> {
        #L x "+" y { x + y }
           x "-" y { x - y }
        #L x "*" y { x * y }
           x "/" y { x / y }
        #R x "^" y { x.pow(y as u32) }
    }

// Boolean

pub boolean_expression -> XFlowValue
  = e:boolean_test { XFlowValue::Boolean(e) }

boolean_test -> bool
  = not
  / numeric_boolean_result
  / boolean_boolean_result

numeric_boolean_result -> bool
  = l:integer _ "==" _ r:integer { l == r }
  / l:integer _ "!=" _ r:integer { l != r }
  / l:integer _ ">" _ r:integer { l > r }
  / l:integer _ "<" _ r:integer { l < r }
  / l:integer _ ">=" _ r:integer { l >= r }
  / l:integer _ "<=" _ r:integer { l <= r }

boolean_boolean_result -> bool
    = #infix<boolean> {
        #L l "==" r { l == r }
           l "!=" r { l != r }
        #R l "&&" r { l && r }
           l "||" r { l || r }
    }

not -> bool
  = "!" l:boolean { !l }

// Primitives

atom -> XFlowValue
 = i:integer { XFlowValue::Integer(i) }
 / b:boolean { XFlowValue::Boolean(b) }

boolean -> bool
 = b:"true" { true }
 / b:"false" { false }

integer -> i64
  = n:$([0-9]+) { n.parse().unwrap() }


pub variables -> Vec<String>
  = variable*

variable -> String
  = "+" s:$([A-Za-z]+) { s.to_string() }

space -> ()
  = " "
  / "\n"
  / "\r"

_ = space*

