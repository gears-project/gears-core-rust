use flox::{FloxValue};

pub expression -> FloxValue
  = boolean_expression
  / arithmetic_expression
  / atom

/// Arithmetic

pub arithmetic_expression -> FloxValue
  = e:equation { FloxValue::Integer(e) }

equation -> i64
  = mul
  / div
  / add
  / sub

add -> i64
  = i:int space* "+" space* j:int { i + j }

sub -> i64
  = i:int space* "-" space* j:int { i - j }

mul -> i64
  = i:int space* "*" space* j:int { i * j }

div -> i64
  = i:int space* "/" space* j:int { i / j }

// Boolean

pub boolean_expression -> FloxValue
  = e:boolean_test { FloxValue::Boolean(e) }

boolean_test -> bool
  = equals
  / not_equals
  / greater_than
  / less_than
  / greater_or_equal
  / less_or_equal
  / and
  / or
  / not
  / xor

equals -> bool
  = l:int space* "==" space* r:int { l == r }
  / l:boolean space* "==" space* r:boolean { l == r }

not_equals -> bool
  = l:int space* "!=" space* r:int { l != r }
  / l:boolean space* "!=" space* r:boolean { l != r }

greater_than -> bool
  = l:int space* ">" space* r:int { l > r }

less_than -> bool
  = l:int space* "<" space* r:int { l < r }

greater_or_equal -> bool
  = l:int space* ">=" space* r:int { l >= r }

less_or_equal -> bool
  = l:int space* "<=" space* r:int { l <= r }

and -> bool
  = l:boolean space* "&&" space* r:boolean { l && r }

or -> bool
  = l:boolean space* "||" space* r:boolean { l || r }

xor -> bool
  = l:boolean space* "^" space* r:boolean { l && r }

not -> bool
  = "!" l:boolean { !l }

// Primitives

atom -> FloxValue
 = i:int { FloxValue::Integer(i) }
 / b:boolean { FloxValue::Boolean(b) }

boolean -> bool
 = b:"true" { true }
 / b:"false" { false }

int -> i64
  = n:$([0-9]+) { n.parse().unwrap() }

space -> ()
  = " "
  / "\n"
  / "\r"

